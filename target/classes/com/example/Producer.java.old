package com.example;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.xcontent.XContentType;

import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Producer {
    private static final int EVENTS_PER_DAY = 300000;
    private static final int SECONDS_IN_A_DAY = 24 * 60 * 60;
    private static final double EVENTS_PER_SECOND = (double) EVENTS_PER_DAY / SECONDS_IN_A_DAY;
    private static final long DELAY_MILLISECONDS = (long) (1000 / EVENTS_PER_SECOND);

    private final RestHighLevelClient client;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final String indexName;

    public Producer(RestHighLevelClient client, String indexName) {
        this.client = client;
        this.indexName = indexName;
    }

    public void start() {
        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(this::produce, 0, DELAY_MILLISECONDS, TimeUnit.MILLISECONDS);
    }

    private void produce() {
        try {
            BulkRequest bulkRequest = new BulkRequest();
            LogMessage logMessage = createLogMessage();
            String id = "COMPLETION_AUDIT_" + logMessage.getQueryId();
            IndexRequest indexRequest = new IndexRequest(indexName)
                    .id(id)
                    .source(objectMapper.writeValueAsString(logMessage), XContentType.JSON);
            bulkRequest.add(indexRequest);
            client.bulk(bulkRequest, RequestOptions.DEFAULT);
            System.out.println("Produced message with id: " + id);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private LogMessage createLogMessage() {
        LogMessage logMessage = new LogMessage();
        logMessage.setUsername("user-" + UUID.randomUUID().toString().substring(0, 8));
        logMessage.setQuery("SELECT * FROM table");
        logMessage.setEffect("READ");
        logMessage.setAction("EXECUTE");
        logMessage.setEnvironment("production");
        logMessage.setStartTime(System.currentTimeMillis());
        logMessage.setHost("host-" + UUID.randomUUID().toString().substring(0, 4));
        logMessage.setQueryId(generateQueryId());
        return logMessage;
    }

    private String generateQueryId() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
        String timestamp = LocalDate.now(ZoneOffset.UTC).format(formatter);
        String randomPart = UUID.randomUUID().toString().substring(0, 5);
        return timestamp + "_" + randomPart;
    }
}
